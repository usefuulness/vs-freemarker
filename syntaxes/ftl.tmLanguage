<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>fileTypes</key>
  <array>
    <string>ftl</string>
    <string>ftlh</string>
    <string>ftlx</string>
    <string>ftlx.html</string>
    <string>ftl.html</string>
  </array>
  <key>foldingStartMarker</key>
  <string>(?x)
    (&lt;(?i:head|body|table|thead|tbody|tfoot|tr|div|nav|section|aside|header|footer|article|select|fieldset|style|script|ul|ol|form|dl)\b.*?&gt;
    |&lt;!--(?!.*--&gt;)
    |\{\s*($|\?&gt;\s*$|//|/\*(.*\*/\s*$|(?!.*?\*/)))
    |[&lt;\[](?:#|@)(?:if|list|foreach|map|has|switch|case|macro|function|assign|compress|escape|noescape|local|global|setting|attempt|recover|auto(?:esc|import)|nested|noparse|items|sep|pre|post|include|import|flush|compress|t|lt|rt|nt|ftl|visit|recurse|fallback|setting|switch|break|return|stop|call|outputformat|outputformat_items).*?(?!/)(?:[&gt;\]]|/(?:[&gt;\]]))
    |^[ \t]*&lt;macro\b.*&gt;\s*$
    )</string>
  <key>foldingStopMarker</key>
  <string>(?x)
    (&lt;/(?i:head|body|table|thead|tbody|tfoot|tr|div|nav|section|aside|header|footer|article|select|fieldset|style|script|ul|ol|form|dl)&gt;
    |^\s*--&gt;
    |(^|\s)\}
    |[&lt;\[]/(?:#|@)(?:if|list|foreach|map|has|switch|case|macro|function|assign|compress|escape|noescape|local|global|setting|attempt|recover|auto(?:esc|import)|nested|noparse|items|sep|pre|post|include|import|flush|compress|t|lt|rt|nt|ftl|visit|recurse|fallback|setting|switch|break|return|stop|call|outputformat|outputformat_items).*?[&gt;\]]
    |^[ \t]*&lt;/macro&gt;\s*$
    )</string>
  <key>keyEquivalent</key>
  <string>^~F</string>
  <key>name</key>
  <string>FreeMarker</string>
  <key>patterns</key>
  <array>
    <!-- Block comments -->
    <dict>
      <key>begin</key>
      <string>[&lt;\[]#--</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.comment.ftl</string>
        </dict>
      </dict>
      <key>end</key>
      <string>--[&gt;\]]</string>
      <key>name</key>
      <string>comment.block.ftl</string>
    </dict>
    
    <!-- FreeMarker noparse directive -->
    <dict>
      <key>begin</key>
      <string>[&lt;\[]#noparse[&gt;\]]</string>
      <key>end</key>
      <string>[&lt;\[]/#noparse[&gt;\]]</string>
      <key>name</key>
      <string>string.unquoted.noparse.ftl</string>
    </dict>

    <!-- FreeMarker Directives (start tags) -->
    <dict>
      <key>begin</key>
      <string>([&lt;\[](#|@))(/?)([\w\.]+)</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.directive.begin.ftl</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>storage.type.directive.ftl</string>
        </dict>
        <key>3</key>
        <dict>
          <key>name</key>
          <string>keyword.operator.slash.ftl</string>
        </dict>
        <key>4</key>
        <dict>
          <key>name</key>
          <string>entity.name.function.directive.ftl</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(/?)[&gt;\]]</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>keyword.operator.slash.ftl</string>
        </dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.directive.end.ftl</string>
        </dict>
      </dict>
      <key>name</key>
      <string>meta.directive.ftl</string>
      <key>patterns</key>
      <array>
        <!-- Nested Interpolations in directives -->
        <dict>
          <key>include</key>
          <string>#interpolations</string>
        </dict>
        <!-- String literals in directives -->
        <dict>
          <key>include</key>
          <string>#strings</string>
        </dict>
        <!-- List, hash and sequence literals -->
        <dict>
          <key>include</key>
          <string>#collections</string>
        </dict>
        <!-- Numeric literals in directives -->
        <dict>
          <key>include</key>
          <string>#numbers</string>
        </dict>
        <!-- Boolean literals in directives -->
        <dict>
          <key>include</key>
          <string>#boolean</string>
        </dict>
        <!-- Special keywords in directives -->
        <dict>
          <key>include</key>
          <string>#keywords</string>
        </dict>
        <!-- Directive parameters -->
        <dict>
          <key>match</key>
          <string>(\w+)(\s*=)</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>variable.parameter.attribute.ftl</string>
            </dict>
            <key>2</key>
            <dict>
              <key>name</key>
              <string>keyword.operator.assignment.ftl</string>
            </dict>
          </dict>
        </dict>
        <!-- Fallback operator in directives -->
        <dict>
          <key>include</key>
          <string>#fallback-operator</string>
        </dict>
        <!-- Function calls in directives -->
        <dict>
          <key>include</key>
          <string>#function-call</string>
        </dict>
        <!-- Operators in directives -->
        <dict>
          <key>include</key>
          <string>#operators</string>
        </dict>
      </array>
    </dict>
    
    <!-- FreeMarker Directives (self-closing tags) -->
    <dict>
      <key>match</key>
      <string>([&lt;\[](#|@))([\w\.]+)(\s+[^/&gt;\]]*)(/)([&gt;\]])</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.directive.begin.ftl</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>storage.type.directive.ftl</string>
        </dict>
        <key>3</key>
        <dict>
          <key>name</key>
          <string>entity.name.function.directive.ftl</string>
        </dict>
        <key>5</key>
        <dict>
          <key>name</key>
          <string>keyword.operator.slash.ftl</string>
        </dict>
        <key>6</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.directive.end.ftl</string>
        </dict>
      </dict>
      <key>name</key>
      <string>meta.directive.self-closing.ftl</string>
    </dict>
    
    <!-- FreeMarker Directives (end tags) -->
    <dict>
      <key>match</key>
      <string>([&lt;\[](/)(#|@))([\w\.]+)(\s*)([&gt;\]])</string>
      <key>captures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.directive.begin.ftl</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>keyword.operator.slash.ftl</string>
        </dict>
        <key>3</key>
        <dict>
          <key>name</key>
          <string>storage.type.directive.ftl</string>
        </dict>
        <key>4</key>
        <dict>
          <key>name</key>
          <string>entity.name.function.directive.ftl</string>
        </dict>
        <key>6</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.directive.end.ftl</string>
        </dict>
      </dict>
      <key>name</key>
      <string>meta.directive.end.ftl</string>
    </dict>
    
    <!-- FreeMarker Interpolation ${...} -->
    <dict>
      <key>begin</key>
      <string>(\$\{)</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.interpolation.begin.ftl</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(\})</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.interpolation.end.ftl</string>
        </dict>
      </dict>
      <key>name</key>
      <string>meta.interpolation.ftl</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#expr-content</string>
        </dict>
      </array>
    </dict>
    
    <!-- Direct FreeMarker Standalone Interpolation (shorthand syntax) -->
    <dict>
      <key>match</key>
      <string>\$(?!{)([a-zA-Z_][a-zA-Z0-9_]*(?:\.[a-zA-Z_][a-zA-Z0-9_]*)*)</string>
      <key>captures</key>
      <dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>meta.interpolation.shorthand.ftl</string>
        </dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>variable.other.interpolation.ftl</string>
        </dict>
      </dict>
    </dict>
    
    <!-- Special Escape Syntax -->
    <dict>
      <key>match</key>
      <string>\$\$|\{\{|\}\}|\[\[|\]\]</string>
      <key>name</key>
      <string>constant.character.escape.ftl</string>
    </dict>
    
    <!-- Built-in FreeMarker Special Variables -->
    <dict>
      <key>match</key>
      <string>\b(true|false|null)\b</string>
      <key>name</key>
      <string>constant.language.ftl</string>
    </dict>
    
    <!-- Include HTML grammar -->
    <dict>
      <key>include</key>
      <string>text.html.basic</string>
    </dict>
  </array>
  
  <!-- Repository of reusable patterns -->
  <key>repository</key>
  <dict>
    <!-- Expression contents -->
    <key>expr-content</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#interpolations</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#strings</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#collections</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#numbers</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#boolean</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#operators</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#keywords</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#special-variables</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#builtin-functions</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#lambda-expression</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#fallback-operator</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#function-call</string>
        </dict>
        <dict>
          <key>include</key>
          <string>#variables</string>
        </dict>
      </array>
    </dict>

    <!-- Nested interpolations ${...} -->
    <key>interpolations</key>
    <dict>
      <key>begin</key>
      <string>(\$\{)</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.interpolation.begin.ftl</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(\})</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.interpolation.end.ftl</string>
        </dict>
      </dict>
      <key>name</key>
      <string>meta.interpolation.nested.ftl</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#expr-content</string>
        </dict>
      </array>
    </dict>
    
    <!-- Collections (lists, sequences, hashes) -->
    <key>collections</key>
    <dict>
      <key>patterns</key>
      <array>
        <!-- Hash literals -->
        <dict>
          <key>begin</key>
          <string>(\{)</string>
          <key>beginCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.hash.begin.ftl</string>
            </dict>
          </dict>
          <key>end</key>
          <string>(\})</string>
          <key>endCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.hash.end.ftl</string>
            </dict>
          </dict>
          <key>name</key>
          <string>meta.hash.ftl</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#hash-content</string>
            </dict>
          </array>
        </dict>
        <!-- List/Sequence literals -->
        <dict>
          <key>begin</key>
          <string>(\[)</string>
          <key>beginCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.list.begin.ftl</string>
            </dict>
          </dict>
          <key>end</key>
          <string>(\])</string>
          <key>endCaptures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.list.end.ftl</string>
            </dict>
          </dict>
          <key>name</key>
          <string>meta.list.ftl</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>include</key>
              <string>#expr-content</string>
            </dict>
          </array>
        </dict>
      </array>
    </dict>
    
    <!-- Hash content -->
    <key>hash-content</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>begin</key>
          <string>(?=\s*(['"].*?['"]|\w+)\s*:)</string>
          <key>end</key>
          <string>,|(?=\})</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.separator.hash.ftl</string>
            </dict>
          </dict>
          <key>patterns</key>
          <array>
            <!-- Hash key as string -->
            <dict>
              <key>begin</key>
              <string>(['"])(.*?)(['"])</string>
              <key>beginCaptures</key>
              <dict>
                <key>1</key>
                <dict>
                  <key>name</key>
                  <string>punctuation.definition.string.begin.ftl</string>
                </dict>
                <key>2</key>
                <dict>
                  <key>name</key>
                  <string>string.quoted.ftl meta.key.ftl</string>
                </dict>
                <key>3</key>
                <dict>
                  <key>name</key>
                  <string>punctuation.definition.string.end.ftl</string>
                </dict>
              </dict>
              <key>end</key>
              <string>(:)</string>
              <key>endCaptures</key>
              <dict>
                <key>1</key>
                <dict>
                  <key>name</key>
                  <string>punctuation.separator.key-value.ftl</string>
                </dict>
              </dict>
            </dict>
            <!-- Hash key as identifier -->
            <dict>
              <key>begin</key>
              <string>(\w+)</string>
              <key>beginCaptures</key>
              <dict>
                <key>1</key>
                <dict>
                  <key>name</key>
                  <string>string.unquoted.key.ftl</string>
                </dict>
              </dict>
              <key>end</key>
              <string>(:)</string>
              <key>endCaptures</key>
              <dict>
                <key>1</key>
                <dict>
                  <key>name</key>
                  <string>punctuation.separator.key-value.ftl</string>
                </dict>
              </dict>
            </dict>
            <!-- Hash value -->
            <dict>
              <key>begin</key>
              <string>(?<=:)\s*</string>
              <key>end</key>
              <string>(?=,|\})</string>
              <key>patterns</key>
              <array>
                <dict>
                  <key>include</key>
                  <string>#expr-content</string>
                </dict>
              </array>
            </dict>
          </array>
        </dict>
      </array>
    </dict>
    
    <!-- String literals -->
    <key>strings</key>
    <dict>
      <key>patterns</key>
      <array>
        <!-- Double quoted strings -->
        <dict>
          <key>begin</key>
          <string>"</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.ftl</string>
            </dict>
          </dict>
          <key>end</key>
          <string>"</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.ftl</string>
            </dict>
          </dict>
          <key>name</key>
          <string>string.quoted.double.ftl</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>match</key>
              <string>\\.</string>
              <key>name</key>
              <string>constant.character.escape.ftl</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#interpolations</string>
            </dict>
          </array>
        </dict>
        <!-- Single quoted strings -->
        <dict>
          <key>begin</key>
          <string>'</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.ftl</string>
            </dict>
          </dict>
          <key>end</key>
          <string>'</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.ftl</string>
            </dict>
          </dict>
          <key>name</key>
          <string>string.quoted.single.ftl</string>
          <key>patterns</key>
          <array>
            <dict>
              <key>match</key>
              <string>\\.</string>
              <key>name</key>
              <string>constant.character.escape.ftl</string>
            </dict>
            <dict>
              <key>include</key>
              <string>#interpolations</string>
            </dict>
          </array>
        </dict>
        <!-- Raw strings (r"...") -->
        <dict>
          <key>begin</key>
          <string>r"</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.ftl</string>
            </dict>
          </dict>
          <key>end</key>
          <string>"</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.ftl</string>
            </dict>
          </dict>
          <key>name</key>
          <string>string.quoted.double.raw.ftl</string>
        </dict>
        <!-- Raw strings (r'...') -->
        <dict>
          <key>begin</key>
          <string>r'</string>
          <key>beginCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.begin.ftl</string>
            </dict>
          </dict>
          <key>end</key>
          <string>'</string>
          <key>endCaptures</key>
          <dict>
            <key>0</key>
            <dict>
              <key>name</key>
              <string>punctuation.definition.string.end.ftl</string>
            </dict>
          </dict>
          <key>name</key>
          <string>string.quoted.single.raw.ftl</string>
        </dict>
      </array>
    </dict>
    
    <!-- Numeric literals -->
    <key>numbers</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>(?x)
            \b
            # Hexadecimal (0x)
            (?:0x[0-9A-Fa-f]+
            # Decimal with optional decimal point
            |(?:\d+\.\d+|\.\d+|\d+)
            # Optional exponent
            (?:[eE][+-]?\d+)?
            )
          </string>
          <key>name</key>
          <string>constant.numeric.ftl</string>
        </dict>
      </array>
    </dict>
    
    <!-- Boolean literals -->
    <key>boolean</key>
    <dict>
      <key>match</key>
      <string>\b(true|false)\b</string>
      <key>name</key>
      <string>constant.language.boolean.ftl</string>
    </dict>
    
    <!-- Special FreeMarker variables -->
    <key>special-variables</key>
    <dict>
      <key>match</key>
      <string>\b(\.(error|data_model|node|directive_stack|current|error_handler_template|host|lang|locale|main|namespace|node_namespace|template_name|vars|version|output_format|formatters|main_template_name|locale_object|current_node_stack|settings|globals|locals|root|args|error_message|error_type))\b</string>
      <key>name</key>
      <string>support.variable.reserved.ftl</string>
    </dict>
    
    <!-- Built-in functions and operations -->
    <key>builtin-functions</key>
    <dict>
      <key>match</key>
      <string>\b(ns|globals|locals|version|caller|vars|data_model|current_template_name|now|datetime|date|time|boolean|byte|short|int|long|float|double|exist|exists|is_[\w]+|has_[\w]+|string|number|is_(?:string|number|boolean|date|method|transform|hash|hash_ex|collection|sequence|enumerable|indexable|directive|node|macro|boolean|date|node|markup_output|numerical|string|transform|character|enumerable|datetime|time))\b</string>
      <key>name</key>
      <string>support.function.built-in.ftl</string>
    </dict>
    
    <!-- FreeMarker keywords -->
    <key>keywords</key>
    <dict>
      <key>match</key>
      <string>\b(as|in|using|list|if|else|elseif|switch|case|default|break|import|include|assign|global|local|setting|macro|function|nested|return|flush|stop|t|lt|rt|nt|attempt|recover|sep|items|autoesc|noautoesc|compress|noparse|escape|noescape|fallback|outputformat)\b</string>
      <key>name</key>
      <string>keyword.control.ftl</string>
    </dict>

    <!-- Lambda expressions -->
    <key>lambda-expression</key>
    <dict>
      <key>begin</key>
      <string>\b(([a-zA-Z_][a-zA-Z0-9_]*)(\s*,\s*[a-zA-Z_][a-zA-Z0-9_]*)*)\s*-&gt;</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>variable.parameter.lambda.ftl</string>
        </dict>
        <key>0</key>
        <dict>
          <key>name</key>
          <string>meta.function.lambda.ftl</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(?=,|\)|\]|\}|[&gt;\]])</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#expr-content</string>
        </dict>
      </array>
    </dict>

    <!-- Fallback operator -->
    <key>fallback-operator</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>(\b[a-zA-Z_][a-zA-Z0-9_]*(?:\.[a-zA-Z_][a-zA-Z0-9_]*)*)(!)(?!\=)(\{.*?\}|\[.*?\]|'.*?'|".*?"|\w+)?</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>variable.other.readwrite.ftl</string>
            </dict>
            <key>2</key>
            <dict>
              <key>name</key>
              <string>keyword.operator.fallback.ftl</string>
            </dict>
            <key>3</key>
            <dict>
              <key>name</key>
              <string>constant.other.fallback-value.ftl</string>
            </dict>
          </dict>
        </dict>
        <dict>
          <key>match</key>
          <string>(\(.*?\))(!)(?!\=)(\{.*?\}|\[.*?\]|'.*?'|".*?"|\w+)?</string>
          <key>captures</key>
          <dict>
            <key>1</key>
            <dict>
              <key>name</key>
              <string>meta.group.ftl</string>
            </dict>
            <key>2</key>
            <dict>
              <key>name</key>
              <string>keyword.operator.fallback.ftl</string>
            </dict>
            <key>3</key>
            <dict>
              <key>name</key>
              <string>constant.other.fallback-value.ftl</string>
            </dict>
          </dict>
        </dict>
      </array>
    </dict>
    
    <!-- Function calls -->
    <key>function-call</key>
    <dict>
      <key>begin</key>
      <string>(\b[a-zA-Z_][a-zA-Z0-9_]*(?:\.[a-zA-Z_][a-zA-Z0-9_]*)*)(\()</string>
      <key>beginCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>entity.name.function.ftl</string>
        </dict>
        <key>2</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.arguments.begin.ftl</string>
        </dict>
      </dict>
      <key>end</key>
      <string>(\))</string>
      <key>endCaptures</key>
      <dict>
        <key>1</key>
        <dict>
          <key>name</key>
          <string>punctuation.definition.arguments.end.ftl</string>
        </dict>
      </dict>
      <key>name</key>
      <string>meta.function-call.ftl</string>
      <key>patterns</key>
      <array>
        <dict>
          <key>include</key>
          <string>#expr-content</string>
        </dict>
      </array>
    </dict>
    
    <!-- Operators -->
    <key>operators</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>(\+\=|\-\=|\*\=|\/\=|\%\=|\+\+|\-\-)</string>
          <key>name</key>
          <string>keyword.operator.assignment.compound.ftl</string>
        </dict>
        <dict>
          <key>match</key>
          <string>(\=\=\=|\=\=|\=|\!\=\=|\!\=)</string>
          <key>name</key>
          <string>keyword.operator.comparison.ftl</string>
        </dict>
        <dict>
          <key>match</key>
          <string>(\&amp;\&amp;|\|\||\!)</string>
          <key>name</key>
          <string>keyword.operator.logical.ftl</string>
        </dict>
        <dict>
          <key>match</key>
          <string>(\&lt;\=|\&gt;\=|\&lt;|\&gt;)</string>
          <key>name</key>
          <string>keyword.operator.relational.ftl</string>
        </dict>
        <dict>
          <key>match</key>
          <string>(\+|\-|\*|\/|\%)</string>
          <key>name</key>
          <string>keyword.operator.arithmetic.ftl</string>
        </dict>
        <dict>
          <key>match</key>
          <string>(\.\.\.?)</string>
          <key>name</key>
          <string>keyword.operator.range.ftl</string>
        </dict>
        <dict>
          <key>match</key>
          <string>(\-\&gt;)</string>
          <key>name</key>
          <string>keyword.operator.arrow.ftl</string>
        </dict>
        <dict>
          <key>match</key>
          <string>(\?)</string>
          <key>name</key>
          <string>keyword.operator.built-in.begin.ftl</string>
        </dict>
        <dict>
          <key>match</key>
          <string>(\?(?:json|html|xml|string|js_string|url|no_esc|markup_string|cap_first|uncap_first|capitalize|chop_linebreak|date|datetime|time|c|eval|floor|ceiling|round|is_[\w]+|has_[\w]+|iso[_\w]+|iso\(.*?\)|string|upper_case|lower_case|title_case|word_list|groups|matches|namespace|number_format|number|long|float|double|boolean|byte|short|int|substring|seq_contains|seq_index_of|seq_last_index_of|sort|sort_by|chunk|reverse|size|right_pad|left_pad|contains|ends_with|starts_with|split|trim|rtrim|ltrim|length|abs|byte|short|int|long|double|float|switch|then|rand|keys|values|fields|filter|matches|interpret|if_exists|has_content|join|replace|seq))</string>
          <key>name</key>
          <string>support.function.built-in.operator.ftl</string>
        </dict>
      </array>
    </dict>
    
    <!-- Variables and properties -->
    <key>variables</key>
    <dict>
      <key>patterns</key>
      <array>
        <dict>
          <key>match</key>
          <string>\b([a-zA-Z_][a-zA-Z0-9_]*(?:\.[a-zA-Z_][a-zA-Z0-9_]*)*)\b</string>
          <key>name</key>
          <string>variable.other.readwrite.ftl</string>
        </dict>
      </array>
    </dict>
  </dict>
  
  <key>scopeName</key>
  <string>text.html.ftl</string>
  <key>uuid</key>
  <string>C011BB07-875D-4DEB-9582-0E1FEC0D1E4E</string>
</dict>
</plist>